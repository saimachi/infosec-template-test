import json
import boto3
import base64
from botocore.exceptions import ClientError
import os
import requests
import uuid

from structlog import get_logger

API_BASE_PATH = 'https://api.any.run/v1'
BASE_HEADERS = {}


logger = get_logger()


def populate_any_run_key(secret_name):
    region_name = "us-east-2"

    # Create a Secrets Manager client
    session = boto3.session.Session()
    client = session.client(
        service_name='secretsmanager',
        region_name=region_name
    )

    # In this sample we only handle the specific exceptions for the 'GetSecretValue' API.
    # See https://docs.aws.amazon.com/secretsmanager/latest/apireference/API_GetSecretValue.html
    # We rethrow the exception by default.

    try:
        get_secret_value_response = client.get_secret_value(
            SecretId=secret_name
        )
    except ClientError as e:
        if e.response['Error']['Code'] == 'DecryptionFailureException':
            # Secrets Manager can't decrypt the protected secret text using the provided KMS key.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InternalServiceErrorException':
            # An error occurred on the server side.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidParameterException':
            # You provided an invalid value for a parameter.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'InvalidRequestException':
            # You provided a parameter value that is not valid for the current state of the resource.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
        elif e.response['Error']['Code'] == 'ResourceNotFoundException':
            # We can't find the resource that you asked for.
            # Deal with the exception here, and/or rethrow at your discretion.
            raise e
    else:
        # Decrypts secret using the associated KMS key.
        # Depending on whether the secret is a string or binary, one of these fields will be populated.
        if 'SecretString' in get_secret_value_response:
            secret = json.loads(get_secret_value_response['SecretString'])['key']
            BASE_HEADERS['Authorization'] = f'API-Key {secret}'

    # Your code goes here. 


def lambda_handler(event, context):
    """Sample pure Lambda function

    Parameters
    ----------
    event: dict, required
        API Gateway Lambda Proxy Input Format

        Event doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html#api-gateway-simple-proxy-for-lambda-input-format

    context: object, required
        Lambda Context runtime methods and attributes

        Context doc: https://docs.aws.amazon.com/lambda/latest/dg/python-context-object.html

    Returns
    ------
    API Gateway Lambda Proxy Output Format: dict

        Return doc: https://docs.aws.amazon.com/apigateway/latest/developerguide/set-up-lambda-proxy-integrations.html
    """

    # try:
    #     ip = requests.get("http://checkip.amazonaws.com/")
    # except requests.RequestException as e:
    #     # Send some context about this error to Lambda Logs
    #     print(e)

    #     raise e

    payload = generate_any_run_payload(event)
    task_id = submit_to_any_run(payload)

    logger.info(f'New task {task_id}')
    # print(f'New task {task_id}')


def generate_any_run_payload(event):
    bucket = event['Records'][0]['s3']['bucket']['name']
    key = event['Records'][0]['s3']['object']['key']

    logger.info(f'File {key} received in bucket {bucket}')
    # print(f'File {key} received in bucket {bucket}')

    # Populate authorization header for future requests
    populate_any_run_key(os.environ['KEY_NAME'])

    # Get temporary file access for AnyRun
    url = generate_presigned_object_url(bucket, key)

    return {
        'obj_type': 'download',
        'obj_url': url
    }


def generate_presigned_object_url(bucket, key):
    url = boto3.client('s3').generate_presigned_url(
        ClientMethod='get_object',
        Params={'Bucket': bucket, 'Key': key}
    )
    return url


def download_file(bucket, key):
    file_name = f'payload-{uuid.uuid4()}'
    s3 = boto3.resource('s3')
    path = f'/tmp/{file_name}'
    with open(path, 'wb') as binary_file:
        # download_fileobj() can do a multipart download using multiple threads
        s3.Bucket(bucket).download_fileobj(key, binary_file)
    return path


def submit_to_any_run(payload):
    resp = requests.post(f'{API_BASE_PATH}/analysis', data=payload, headers=BASE_HEADERS)
    resp.raise_for_status()
    json_output = json.loads(resp.content)
    return json_output['data']['taskid']


def get_job_history(job_id):
    resp = requests.get(f'{API_BASE_PATH}/analysis/{job_id}', headers=BASE_HEADERS)
    resp.raise_for_status()
    return json.loads(resp.content)
